frontend/vite.config.ts:  // process.cwd() 在 vite.config.js 执行时，通常是项目的根目录（在这里是 'frontend'）
frontend/vite.config.ts:  // 第三个参数 '' 表示加载所有环境变量，不仅仅是 VITE_ 开头的。
frontend/vite.config.ts:  console.log('PORT value from loadEnv:', env.PORT); // 这里应该是你 .env 文件中的 PORT 值
frontend/vite.config.ts:  // 使用从 .env 文件加载的 PORT，如果未定义，则回退到 3000
frontend/vite.config.ts:      port: 5173, // 明确指定开发服务器端口
frontend/vite.config.ts:      strictPort: true, // 如果端口被占用，则报错而不是尝试下一个端口
frontend/vite.config.ts:          rewrite: (path) => path // 保持原样，如果后端API路径包含了/api，则不需要rewrite
backend/library/proxy/manager.go:// GetService 获取一个服务实例
backend/library/proxy/manager.go:// StartService 启动一个服务
backend/library/proxy/manager.go:		// 服务已经在运行，不需要再次启动
backend/library/proxy/manager.go:// StopService 停止一个服务
backend/library/proxy/manager.go:		// 服务已经停止，不需要再次停止
backend/library/proxy/manager.go:// RestartService 重启一个服务
backend/library/proxy/manager.go:	// 如果服务正在运行，先停止它
backend/library/proxy/manager.go:	// 启动服务
backend/library/proxy/manager.go:// GetServiceHealth 获取服务的健康状态
backend/library/proxy/manager.go:// ForceCheckServiceHealth 强制检查服务的健康状态
backend/library/proxy/manager.go:// UpdateServiceConfig 更新服务配置
backend/library/proxy/manager.go:// GetAllServices 获取所有服务
backend/library/proxy/manager.go:// GetServiceHealthJSON 获取服务健康状态的JSON字符串
backend/library/proxy/manager.go:// UpdateMCPServiceHealth 更新缓存中服务的健康状态
backend/library/proxy/manager.go:	// 获取全局健康状态缓存管理器
backend/library/proxy/manager.go:	// 将健康状态存储到缓存中
backend/library/proxy/manager.go:				// 检查服务状态
backend/library/proxy/manager.go:				// 如果服务已停止，尝试重启
backend/library/proxy/manager.go:						// 记录错误但继续处理其他服务
backend/library/proxy/manager.go:// GetSSEServiceByName 根据服务名查找 SSESvc 实例
backend/library/proxy/manager.go:// SetService 允许注入 mock Service（测试专用）
backend/model/mcp_service.go:	InstallerUserID       int64           `db:"installer_user_id"`       // 记录安装者的用户ID
backend/model/mcp_service.go:	HealthStatus          string          `db:"-"`                       // 健康状态: unknown, healthy, unhealthy, starting, stopped
backend/model/mcp_service.go:	LastHealthCheck       time.Time       `db:"-"`                       // 最后健康检查时间
backend/model/mcp_service.go:	HealthDetails         string          `db:"-"`                       // 健康详情的JSON字符串
backend/model/mcp_service.go:	RPDLimit              int             `json:"rpd_limit,omitempty" db:"rpd_limit,default:0"`          // 每日请求次数限制(0表示不限制)
backend/model/main.go:// 全局变量用于兼容旧代码，后续可逐步移除
backend/model/main.go:	// 检查是否有用户，无则创建 root 用户
backend/model/main.go:			Password:    "123456", // 直接使用明文密码，让Insert方法来处理哈希
backend/model/main.go:	// Thing ORM 不需要显式关闭 DB，若后续有需要可补充
backend/model/user.go:// UserInit 用于在 InitDB 时初始化 UserDB
backend/model/user.go:	// 尝试将 keyword 转换为数字
backend/model/user.go:		// keyword 是数字，包含 ID 搜索
backend/model/user.go:		// keyword 不是数字，只搜索字符串字段
backend/model/user.go:// GetUserById 根据ID获取用户
backend/model/user.go:// DeleteUserById 根据ID软删除用户
backend/model/user.go:// GetUserByUsernameForAdmin 根据用户名获取用户（用于管理员操作，不受状态限制）
backend/common/response.go:// API响应的标准格式
backend/common/response.go:// 时间格式常量
backend/common/response.go:// RespSuccess 响应成功，返回数据
backend/common/response.go:// RespSuccessStr 响应成功，返回消息
backend/common/response.go:// RespError 响应错误，包含错误信息
backend/common/response.go:// RespErrorStr 响应错误，只包含错误消息
backend/common/response.go:// FormatTime 格式化时间为RFC3339MilliZ格式
backend/api/route/api-router.go:		// 注册 SSE 代理路由
backend/library/market/npm_test.go:	// 测试情况1：常规MCP配置
backend/library/market/npm_test.go:		// 验证提取的配置
backend/library/market/npm_test.go:	// 测试情况2：没有MCP配置的README
backend/library/market/npm_test.go:	// 测试情况3：不完整的JSON
backend/library/market/npm_test.go:	// 创建测试MCP配置
backend/library/market/npm_test.go:					"API_KEY":  "value1", // 重复的环境变量
backend/library/market/npm_test.go:	// 获取环境变量
backend/library/market/npm_test.go:	// 预期有5个唯一的环境变量
backend/library/market/npm_test.go:	// 验证环境变量名称
backend/library/market/npm_test.go:	// 测试文本
backend/library/market/npm_test.go:	// 查找包含mcpServers的JSON块
backend/library/market/npm_test.go:	// 应该找到一个块
backend/library/market/npm_test.go:	// 验证块内容
backend/library/market/npm_test.go:	// 跳过实际执行，仅在明确指定TEST_NPM_INSTALL环境变量时运行
backend/library/market/npm_test.go:	// 测试安装一个简单的npm包
backend/library/market/npm_test.go:	version := "4.1.2"     // 指定一个特定版本以确保测试一致性
backend/library/market/npm_test.go:	command := "npx"       // 默认命令
backend/library/market/npm_test.go:	args := []string{"-y"} // 默认参数
backend/library/market/npm_test.go:	workDir := ""          // 使用默认工作目录
backend/library/market/npm_test.go:	// 验证返回的服务器信息
backend/library/market/npm_test.go:	// 输出服务器信息
backend/library/market/npm_test.go:	// 跳过实际执行，仅在明确指定TEST_NPX_CHECK环境变量时运行
backend/library/market/npm_test.go:	// 这个测试的目的是验证函数是否成功运行，而不是验证npx是否确实可用
backend/library/market/npm_test.go:	// 因为在不同环境中npx可能存在也可能不存在
backend/library/market/npm_test.go:	// 跳过实际执行，仅在明确指定TEST_MCP_SERVERS_DB环境变量时运行
backend/api/handler/wechat.go:		return "", errors.New("无效的参数")
backend/api/handler/wechat.go:		return "", errors.New("验证码错误或已过期")
backend/api/handler/wechat.go:			"message": "管理员未开启通过微信登录以及注册",
backend/api/handler/wechat.go:				"message": "管理员关闭了新用户注册",
backend/api/handler/wechat.go:			"message": "用户已被封禁",
backend/api/handler/wechat.go:			"message": "管理员未开启通过微信登录以及注册",
backend/api/handler/wechat.go:			"message": "该微信账号已被绑定",
frontend/src/contexts/AuthContext.tsx:    token?: string; // 添加token字段
frontend/src/contexts/AuthContext.tsx:    updateUserInfo: (userData: User) => void; // 添加更新用户信息的方法
backend/api/handler/user.go:	// 获取当前用户完整信息，避免覆盖其他字段
backend/api/handler/user.go:	// 只更新允许修改的字段
backend/api/handler/user.go:	// 删除成功，返回成功响应
backend/api/handler/user.go:	// 验证当前密码
backend/api/handler/user.go:	// 检查是否为 OAuth 用户（不应该能够修改密码）
backend/api/handler/user.go:	// 更新密码
backend/model/option.go:// OptionInit 用于在 InitDB 时初始化 OptionDB
frontend/eslint.config.js:      // 禁用 any 类型的严格检查，允许使用 any
frontend/eslint.config.js:      // 也可以设置为 warn 而不是 error
backend/library/market/installation.go:// InstallationStatus 表示安装状态
backend/library/market/installation.go:	// StatusPending 表示等待安装
backend/library/market/installation.go:	// StatusInstalling 表示正在安装
backend/library/market/installation.go:	// StatusCompleted 表示安装完成
backend/library/market/installation.go:	// StatusFailed 表示安装失败
backend/library/market/installation.go:// InstallationTask 表示一个安装任务
backend/library/market/installation.go:	ServiceID        int64                 // 服务ID
backend/library/market/installation.go:	UserID           int64                 // 用户ID, 用于后续创建用户特定配置
backend/library/market/installation.go:	PackageName      string                // 包名
backend/library/market/installation.go:	PackageManager   string                // 包管理器
backend/library/market/installation.go:	Version          string                // 版本
backend/library/market/installation.go:	Command          string                // 命令
backend/library/market/installation.go:	Args             []string              // 参数列表
backend/library/market/installation.go:	EnvVars          map[string]string     // 环境变量
backend/library/market/installation.go:	Status           InstallationStatus    // 状态
backend/library/market/installation.go:	StartTime        time.Time             // 开始时间
backend/library/market/installation.go:	EndTime          time.Time             // 结束时间
backend/library/market/installation.go:	Output           string                // 输出信息
backend/library/market/installation.go:	Error            string                // 错误信息
backend/library/market/installation.go:	CompletionNotify chan InstallationTask // 完成通知
backend/library/market/installation.go:// InstallationManager 管理安装任务
backend/library/market/installation.go:// 全局安装管理器
backend/library/market/installation.go:// GetInstallationManager 获取全局安装管理器
backend/library/market/installation.go:// GetTaskStatus 获取任务状态
backend/library/market/installation.go:// SubmitTask 提交安装任务
backend/library/market/installation.go:	// 如果已经有任务在运行，不重复提交
backend/library/market/installation.go:	// 初始化任务状态
backend/library/market/installation.go:	// 保存任务
backend/library/market/installation.go:	// 启动后台安装任务
backend/library/market/installation.go:// runInstallationTask 运行安装任务
backend/library/market/installation.go:	// 更新任务状态为安装中
backend/library/market/installation.go:	// 创建上下文
backend/library/market/installation.go:		output = fmt.Sprintf("不支持的包管理器: %s", task.PackageManager)
backend/library/market/installation.go:	// 更新任务状态
backend/library/market/installation.go:		log.Printf("[InstallTask] 任务失败: ServiceID=%d, Package=%s, Error=%v", task.ServiceID, task.PackageName, err)
backend/library/market/installation.go:		// 新增：尝试删除因此次失败安装而在数据库中预先创建的服务记录
backend/library/market/installation.go:		log.Printf("[InstallTask] 安装失败，尝试删除预创建的服务记录: ServiceID=%d", task.ServiceID)
backend/library/market/installation.go:			log.Printf("[InstallTask] 删除服务记录失败 ServiceID=%d: %v. 原始安装错误: %v", task.ServiceID, deleteErr, err)
backend/library/market/installation.go:			// 注意：即使删除失败，也应继续报告原始安装失败。
backend/library/market/installation.go:			// 这里的删除失败是一个次要问题，主要问题是安装失败。
backend/library/market/installation.go:			log.Printf("[InstallTask] 成功删除因安装失败而产生的服务记录: ServiceID=%d", task.ServiceID)
backend/library/market/installation.go:		log.Printf("[InstallTask] 任务完成: ServiceID=%d, Package=%s", task.ServiceID, task.PackageName)
backend/library/market/installation.go:		// 更新数据库中的服务状态
backend/library/market/installation.go:	// 发送完成通知
backend/library/market/installation.go:// updateServiceStatus 更新服务状态
backend/library/market/installation.go:	// 确保安装完成后DefaultEnvsJSON正确设置（备用逻辑）
backend/library/market/installation.go:	// 注意：不再在安装时保存UserConfig，因为安装时的环境变量是服务默认配置
backend/library/market/installation.go:	// UserConfig只在用户需要个人配置时保存
backend/library/market/installation.go:	// 服务注册和客户端初始化现在由 proxy.ServiceManager 处理
backend/library/market/installation.go:	// 在服务被启用时会自动注册到 ServiceManager 中
backend/library/market/installation.go:// CleanupTask 清理任务
backend/library/market/installation.go:// GetAllTasks 获取所有任务
backend/api/handler/proxy_handler_test.go:// mockSSEHandler 是一个简单的 SSE http.Handler
backend/api/handler/proxy_handler_test.go:// 它会输出 event: message\ndata: Hello test message\n\n
backend/library/market/npm.go:	// NPMAPI 官方npm registry API
backend/library/market/npm.go:	// NPMPackageInfo 官方npm包信息API
backend/library/market/npm.go:// NPMSearchResult 表示npm搜索结果
backend/library/market/npm.go:// NPMPackageDetails 表示npm包详细信息
backend/library/market/npm.go:	RequiresEnv     []string          `json:"requiresEnv,omitempty"` // 可能的自定义字段，指示所需环境变量
backend/library/market/npm.go:	Readme          string            `json:"readme,omitempty"`         // 包README内容
backend/library/market/npm.go:	ReadmeFilename  string            `json:"readmeFilename,omitempty"` // README文件名
backend/library/market/npm.go:// SearchPackageResult 包含搜索结果中每个包的简化信息
backend/library/market/npm.go:// 这个结构体用于在前端展示搜索结果，并且现在会包含已安装服务的数字ID
backend/library/market/npm.go:// TODO: 和 ServiceType 统一字段，目前字段有点乱
backend/library/market/npm.go:// SearchNPMPackages 搜索npm包
backend/library/market/npm.go:	// 构建请求URL
backend/library/market/npm.go:	// 设置查询参数
backend/library/market/npm.go:	// 创建带上下文的请求
backend/library/market/npm.go:	// 设置请求头
backend/library/market/npm.go:	// 发送请求
backend/library/market/npm.go:	// 读取响应
backend/library/market/npm.go:	// 检查HTTP状态码
backend/library/market/npm.go:	// 解析响应
backend/library/market/npm.go:	// 添加分页信息
backend/library/market/npm.go:// GetNPMPackageDetails 获取npm包详情
backend/library/market/npm.go:	// 构建请求URL
backend/library/market/npm.go:	// 创建带上下文的请求
backend/library/market/npm.go:	// 设置请求头
backend/library/market/npm.go:	// 发送请求
backend/library/market/npm.go:	// 读取响应
backend/library/market/npm.go:	// 检查HTTP状态码
backend/library/market/npm.go:	// 解析响应
backend/library/market/npm.go:// GetNPMPackageReadme 获取npm包的README内容
backend/library/market/npm.go:	// npm registry API会在包详情中直接返回readme，所以我们复用GetNPMPackageDetails函数
backend/library/market/npm.go:	// 如果包详情中已包含readme，直接返回
backend/library/market/npm.go:	// 如果没有readme，可能需要从github或其他源获取
backend/library/market/npm.go:	// 尝试从repository URL获取
backend/library/market/npm.go:		// 即使出错也继续，尝试其他方法
backend/library/market/npm.go:	// 如果有homepage且是github，尝试从github获取README
backend/library/market/npm.go:	// 无法获取README内容
backend/library/market/npm.go:	// 目前我们只是预留这个函数，用于将来实现从GitHub/GitLab等获取README
backend/library/market/npm.go:	// 这需要处理不同的URL格式，使用API，可能需要认证等
backend/library/market/npm.go:	// 由于这些复杂性，此处仅返回空字符串
backend/library/market/npm.go:		// 去除 repo 名末尾的 .git
backend/library/market/npm.go:// FetchGitHubStars 调用GitHub API获取stars，支持token，失败返回0
backend/library/market/npm.go:		log.Printf("[stars] owner/repo 为空，owner=%s repo=%s", owner, repo)
backend/library/market/npm.go:			log.Printf("[stars] 命中 Redis 缓存 %s=%s", cacheKey, val)
backend/library/market/npm.go:	// log.Printf("[stars] 请求 GitHub API: %s", apiURL)
backend/library/market/npm.go:		log.Printf("[stars] 创建请求失败: %v", err)
backend/library/market/npm.go:		// log.Printf("[stars] 读取到 token，长度=%d，前5位=%s", len(token), token[:5])
backend/library/market/npm.go:		log.Printf("[stars] 未读取到 GITHUB_TOKEN 环境变量")
backend/library/market/npm.go:		log.Printf("[stars] 请求 GitHub API 失败: %v", err)
backend/library/market/npm.go:	// log.Printf("[stars] GitHub API 响应状态码: %d", resp.StatusCode)
backend/library/market/npm.go:	// log.Printf("[stars] GitHub API 响应体: %s", string(body))
backend/library/market/npm.go:		log.Printf("[stars] 解析响应失败: %v", err)
backend/library/market/npm.go:		log.Printf("[stars] 写入 Redis 缓存 %s=%d", cacheKey, data.Stars)
backend/library/market/npm.go:// ConvertNPMToSearchResult 将npm搜索结果转换为统一格式
backend/library/market/npm.go:// GuessMCPEnvVarsFromReadme 从README中猜测环境变量
backend/library/market/npm.go:	// 查找可能的环境变量模式，如 `process.env.XXX`
backend/library/market/npm.go:		// 检查process.env.*模式
backend/library/market/npm.go:					// 清理掉非字母数字字符
backend/library/market/npm.go:		// 检查环境变量设置模式，如 `ENV_VAR=value`
backend/library/market/npm.go:				// 只保留全大写和下划线的变量名
backend/library/market/npm.go:// isEnvVarName 检查字符串是否符合环境变量命名规则
backend/library/market/npm.go:	// 环境变量通常是全大写加下划线
backend/library/market/npm.go:	// 要求至少一个大写字母，且有效字符占比超过80%
backend/library/market/npm.go:// contains 检查字符串切片是否包含指定字符串
backend/library/market/npm.go:// MCPServerConfig 表示MCP服务器配置
backend/library/market/npm.go:// MCPConfig 表示MCP配置
backend/library/market/npm.go:// ExtractMCPConfig 从npm包的package.json中提取MCP配置
backend/library/market/npm.go:	// 首先尝试在readme中查找MCP配置
backend/library/market/npm.go:	// 如果在readme中找不到，则尝试从packageDetails中提取
backend/library/market/npm.go:	// 这里可以添加从package.json中特定字段提取的逻辑
backend/library/market/npm.go:	return nil, nil // 如果找不到MCP配置，返回nil
backend/library/market/npm.go:// findMCPConfigInReadme 在readme中查找MCP配置
backend/library/market/npm.go:	// 查找可能的MCP配置模式，例如 "mcpServers": { ... }
backend/library/market/npm.go:		// 尝试解析为MCPConfig
backend/library/market/npm.go:		// 将匹配块包装成合法的JSON，如果它本身不是完整的JSON对象
backend/library/market/npm.go:// findJSONBlocksInText 在文本中查找包含指定键的JSON块
backend/library/market/npm.go:			// 找到可能的起始行
backend/library/market/npm.go:			// 往前找几行，确保包含开头的大括号
backend/library/market/npm.go:			// 提取JSON块
backend/library/market/npm.go:				// 计算大括号深度
backend/library/market/npm.go:							// 找到完整的JSON块
backend/library/market/npm.go:// GetEnvVarsFromMCPConfig 从MCP配置中提取环境变量
backend/library/market/npm.go:	// 遍历所有服务器配置
backend/library/market/npm.go:		// 1. 首先提取 env 字段中的环境变量（包括占位符形式）
backend/library/market/npm.go:		// 2. 如果 env 字段为空，尝试从 command 字段中提取
backend/library/market/npm.go:			// 2.1 从 URL 参数中提取 API Key
backend/library/market/npm.go:				// 查找形如 someApiKey= 的模式
backend/library/market/npm.go:						// 将camelCase转换为UPPER_SNAKE_CASE
backend/library/market/npm.go:			// 2.2 从 command + args 组合中推断包名和环境变量
backend/library/market/npm.go:				// 查找形如 "-y", "package-name" 的模式
backend/library/market/npm.go:					// 如果没有 -y 标志，取最后一个参数作为包名
backend/library/market/npm.go:				// 清理包名（移除版本号）
backend/library/market/npm.go:				// 根据包名推断环境变量
backend/library/market/npm.go:			// 2.3 从 command 字段中包含的包名推断（当整个命令在一个字段中时）
backend/library/market/npm.go:				// 从命令中提取包名
backend/library/market/npm.go:						// 跳过 -y 标志
backend/library/market/npm.go:							// 清理包名（移除版本号和URL）
backend/library/market/npm.go:							// 如果是URL，跳过
backend/library/market/npm.go:	// 转换为字符串切片
backend/library/market/npm.go:// convertCamelToSnake 将camelCase转换为UPPER_SNAKE_CASE
backend/library/market/npm.go:// 例如: tavilyApiKey -> TAVILY_API_KEY
backend/library/market/npm.go:// inferEnvVarsFromPackageName 根据包名推断可能的环境变量
backend/library/market/npm.go:	// 常见的包名到环境变量的映射
backend/library/market/npm.go:	// 直接匹配
backend/library/market/npm.go:	// 模式匹配：基于包名推断
backend/library/market/npm.go:	// 去重
backend/library/market/npm.go:// CheckNPXAvailable 检查npx命令是否可用
backend/library/market/npm.go:// ListMCPServerTools 列出 MCP 服务器提供的工具
backend/library/market/npm.go:	// 这个函数现在已经过时，应该使用 proxy.ServiceManager 来获取工具
backend/library/market/npm.go:	// 暂时返回错误，建议调用者使用新的服务管理方式
backend/library/market/npm.go:// MCPServerInfo 包含 MCP 服务器的详细信息
backend/library/market/npm.go:// GetInstalledMCPServersFromDB 从数据库中获取已安装的 MCP 服务器的名称和数字ID.
backend/library/market/npm.go:// 返回一个 map[SourcePackageName]ServiceID.
backend/library/market/npm.go:	// 获取所有已启用且未删除的服务 (model.GetEnabledServices should ideally filter out deleted)
backend/library/market/npm.go:// UninstallNPMPackage 卸载npm包
backend/library/market/npm.go:	// 服务的停止和客户端清理现在由 proxy.ServiceManager.UnregisterService() 处理
backend/library/market/npm.go:	// 这个函数现在只负责物理包的卸载逻辑（如果需要的话）
backend/library/market/npm.go:	// 实际卸载逻辑可以在这里添加，比如调用 npm uninstall，或者清理相关文件
backend/library/market/npm.go:	// 对于大多数情况，服务进程的终止就足够了，因为它们是临时启动的
backend/library/proxy/service.go:// ServiceStatus 表示服务的健康状态
backend/library/proxy/service.go:	// StatusUnknown 表示服务状态未知
backend/library/proxy/service.go:	// StatusHealthy 表示服务正常
backend/library/proxy/service.go:	// StatusUnhealthy 表示服务异常
backend/library/proxy/service.go:	// StatusStarting 表示服务正在启动
backend/library/proxy/service.go:	// StatusStopped 表示服务已停止
backend/library/proxy/service.go:// ServiceHealth 包含服务健康相关的信息
backend/library/proxy/service.go:	ResponseTime  int64         `json:"response_time_ms,omitempty"` // 毫秒
backend/library/proxy/service.go:	UpTime        int64         `json:"up_time_seconds,omitempty"` // 秒
backend/library/proxy/service.go:	WarningLevel  int           `json:"warning_level,omitempty"`   // 0-无警告，1-轻微，2-中等，3-严重
backend/library/proxy/service.go:	InstanceCount int           `json:"instance_count,omitempty"`  // 实例数量（如有多实例）
backend/library/proxy/service.go:// Service 接口定义了所有MCP服务必须实现的方法
backend/library/proxy/service.go:	// ID 返回服务的唯一标识符
backend/library/proxy/service.go:	// Name 返回服务的名称
backend/library/proxy/service.go:	// Type 返回服务的类型（stdio、sse、streamable_http）
backend/library/proxy/service.go:	// Start 启动服务
backend/library/proxy/service.go:	// Stop 停止服务
backend/library/proxy/service.go:	// IsRunning 检查服务是否正在运行
backend/library/proxy/service.go:	// CheckHealth 检查服务健康状态
backend/library/proxy/service.go:	// GetHealth 获取最后一次检查的健康状态
backend/library/proxy/service.go:	// GetConfig 返回服务配置
backend/library/proxy/service.go:	// UpdateConfig 更新服务配置
backend/library/proxy/service.go:	// HealthCheckTimeout 返回此服务进行健康检查时建议的超时时间。
backend/library/proxy/service.go:	// 如果返回 0 或负值，HealthChecker 将使用其默认超时。
backend/library/proxy/service.go:// BaseService 是一个基本的服务实现，可以被具体服务类型继承
backend/library/proxy/service.go:// NewBaseService 创建一个新的基本服务实例
backend/library/proxy/service.go:// ID 实现Service接口
backend/library/proxy/service.go:// Name 实现Service接口
backend/library/proxy/service.go:// Type 实现Service接口
backend/library/proxy/service.go:// IsRunning 实现Service接口
backend/library/proxy/service.go:// GetHealth 实现Service接口
backend/library/proxy/service.go:	// 创建一个新的健康状态副本以避免并发访问问题
backend/library/proxy/service.go:	// 如果服务在运行，计算当前的运行时间
backend/library/proxy/service.go:// GetConfig 实现Service接口
backend/library/proxy/service.go:	// 创建配置的副本
backend/library/proxy/service.go:// HealthCheckTimeout 实现Service接口。
backend/library/proxy/service.go:// 它根据服务类型返回建议的超时时间。
backend/library/proxy/service.go:	s.mu.RLock() // 保证线程安全地读取 s.serviceType
backend/library/proxy/service.go:		// Stdio 服务可能需要更长的超时时间进行健康检查
backend/library/proxy/service.go:	// 对于其他类型的服务（如 http, sse），返回0，让 HealthChecker 使用其默认超时（当前为10秒）。
backend/library/proxy/service.go:	// 如果特定服务（如某个特殊的HTTP服务）需要不同的超时，它可以在自己的实现中覆盖此方法。
backend/library/proxy/service.go:// UpdateConfig 实现Service接口
backend/library/proxy/service.go:	// 更新配置
backend/library/proxy/service.go:// Start 是一个基本实现，具体服务类型应重写此方法
backend/library/proxy/service.go:// Stop 是一个基本实现，具体服务类型应重写此方法
backend/library/proxy/service.go:// UpdateHealth 更新服务的健康状态（内部使用）
backend/library/proxy/service.go:	// 更新成功/失败计数
backend/library/proxy/service.go:	// 设置警告级别
backend/library/proxy/service.go:// CheckHealth 是一个基本实现，具体服务类型应重写此方法
backend/library/proxy/service.go:	// 基本实现只检查服务是否在运行
backend/library/proxy/service.go:	// 返回健康状态的副本
backend/library/proxy/service.go:// ServiceFactory 用于创建适合特定类型的服务实例，包含真实的MCP连接用于准确的健康监测
backend/api/handler/market_test.go:			input:    "我的服务 Test",
backend/api/handler/market_test.go:			expected: "我的服务-test",
backend/api/handler/market_test.go:	// 这个测试需要数据库连接，所以我们先跳过实际的数据库操作
backend/api/handler/market_test.go:	// 在实际环境中，你需要设置测试数据库
backend/api/handler/market_test.go:	t.Skip("需要数据库连接的集成测试")
backend/api/handler/market_test.go:	// 设置Gin为测试模式
backend/api/handler/market_test.go:	// 创建测试路由
backend/api/handler/market_test.go:	// 第一次创建服务的请求体
backend/api/handler/market_test.go:	// 第一次请求 - 应该成功
backend/api/handler/market_test.go:	// 第二次请求 - 应该返回冲突错误
backend/api/handler/market_test.go:	// 验证第二次请求返回冲突状态码
backend/api/handler/market_test.go:	// 验证响应消息包含冲突信息
backend/api/handler/market_test.go:	assert.Contains(t, response["message"], "已存在")
backend/api/handler/market_test.go:// MockCreateCustomService 用于测试的模拟函数，不依赖数据库
backend/api/handler/market_test.go:	// 清理和验证服务名称
backend/api/handler/market_test.go:	// 使用模拟的数据库查询函数
backend/api/handler/market_test.go:	// 模拟成功创建
backend/api/handler/market_test.go:		"message": "自定义服务创建成功",
backend/api/handler/market_test.go:	// 模拟已存在的服务
backend/api/handler/market_test.go:	// 创建测试路由
backend/api/handler/market_test.go:	// 测试用例1: 创建新服务 - 应该成功
backend/api/handler/market_test.go:	// 测试用例2: 创建重复服务 - 应该返回冲突错误
backend/api/handler/market_test.go:			"name": "Test Service", // 这会被清理为 "test-service"，与已存在的服务冲突
backend/api/handler/market_test.go:	// 测试用例3: 空名称 - 应该返回错误
frontend/src/pages/ServicesPage.integration.test.tsx:        const uninstallButton = screen.getByTitle('卸载服务')
frontend/src/pages/ServicesPage.integration.test.tsx:        expect(screen.getByText('确认卸载')).toBeInTheDocument()
frontend/src/pages/ServicesPage.integration.test.tsx:        expect(screen.getByText('确定要卸载此服务吗？这将移除所有相关配置。')).toBeInTheDocument()
frontend/src/pages/ServicesPage.integration.test.tsx:        const confirmButton = screen.getByRole('button', { name: '卸载' })
frontend/src/pages/ServicesPage.integration.test.tsx:        const uninstallButton = screen.getByTitle('卸载服务')
frontend/src/pages/ServicesPage.integration.test.tsx:        const confirmButton = screen.getByRole('button', { name: '卸载' })
frontend/src/pages/ServicesPage.integration.test.tsx:        const uninstallButtons = screen.getAllByTitle('卸载服务')
frontend/src/pages/ServicesPage.integration.test.tsx:        const confirmButton = screen.getByRole('button', { name: '卸载' })
frontend/src/pages/ServicesPage.integration.test.tsx:        // We need to find the "自定义安装" (Custom Install) item in the dropdown and click it.
frontend/src/pages/OAuthCallback.tsx:                setError(`OAuth ${provider} 授权失败: ${error}`);
frontend/src/pages/OAuthCallback.tsx:                setError('缺少授权码');
frontend/src/pages/OAuthCallback.tsx:                    // 登录成功
frontend/src/pages/OAuthCallback.tsx:                        title: "登录成功",
frontend/src/pages/OAuthCallback.tsx:                        description: `欢迎通过 ${provider === 'github' ? 'GitHub' : 'Google'} 登录！`
frontend/src/pages/OAuthCallback.tsx:                    // 重定向到主页
frontend/src/pages/OAuthCallback.tsx:                    setError(response.message || `${provider} OAuth 登录失败`);
frontend/src/pages/OAuthCallback.tsx:                setError(error?.response?.data?.message || error.message || `${provider} OAuth 登录失败`);
frontend/src/pages/OAuthCallback.tsx:                    <p className="text-lg">正在处理 OAuth 登录...</p>
frontend/src/pages/OAuthCallback.tsx:                    <h1 className="text-2xl font-bold mb-4">OAuth 登录失败</h1>
frontend/src/pages/OAuthCallback.tsx:                        返回登录页面
backend/api/handler/google.go:		return nil, errors.New("无效的参数")
backend/api/handler/google.go:		return nil, errors.New("无法连接至 Google 服务器，请稍后重试！")
backend/api/handler/google.go:		return nil, errors.New("无法连接至 Google 服务器，请稍后重试！")
backend/api/handler/google.go:		return nil, errors.New("返回值非法，用户字段为空，请稍后重试！")
backend/api/handler/google.go:			"message": "管理员未开启通过 Google 登录以及注册",
backend/api/handler/google.go:				"message": "管理员关闭了新用户注册",
backend/api/handler/google.go:			"message": "用户已被封禁",
backend/api/handler/google.go:			"message": "管理员未开启通过 Google 登录以及注册",
backend/api/handler/google.go:			"message": "该 Google 账户已被绑定",
backend/api/handler/google.go:			"message": "用户未登录",
backend/api/handler/google.go:			"message": "用户ID格式错误",
backend/api/handler/google.go:		"message": "Google账户绑定成功",
backend/api/handler/misc.go:			"message": "无效的参数",
backend/api/handler/misc.go:			"message": "邮箱地址已被占用",
backend/api/handler/misc.go:	subject := fmt.Sprintf("%s邮箱验证邮件", common.GetSystemName())
backend/api/handler/misc.go:	content := fmt.Sprintf("<p>您好，你正在进行%s邮箱验证。</p>"+
backend/api/handler/misc.go:		"<p>您的验证码为: <strong>%s</strong></p>"+
backend/api/handler/misc.go:		"<p>验证码 %d 分钟内有效，如果不是本人操作，请忽略。</p>", common.GetSystemName(), code, common.VerificationValidMinutes)
backend/api/handler/misc.go:			"message": "无效的参数",
backend/api/handler/misc.go:			"message": "该邮箱地址未注册",
backend/api/handler/misc.go:	subject := fmt.Sprintf("%s密码重置", common.GetSystemName())
backend/api/handler/misc.go:	content := fmt.Sprintf("<p>您好，你正在进行%s密码重置。</p>"+
backend/api/handler/misc.go:		"<p>点击<a href='%s'>此处</a>进行密码重置。</p>"+
backend/api/handler/misc.go:		"<p>重置链接 %d 分钟内有效，如果不是本人操作，请忽略。</p>", common.GetSystemName(), link, common.VerificationValidMinutes)
backend/api/handler/misc.go:			"message": "无效的参数",
backend/api/handler/misc.go:			"message": "重置链接非法或已过期",
backend/common/i18n/i18n.go:// 初始化i18n，加载所有语言资源
backend/common/i18n/i18n.go:	// 确保目录存在
backend/common/i18n/i18n.go:	// 读取所有语言文件
backend/common/i18n/i18n.go:		// 提取语言代码 (文件名去掉扩展名)
backend/common/i18n/i18n.go:		// 读取语言文件
backend/common/i18n/i18n.go:		// 解析JSON
backend/common/i18n/i18n.go:		// 添加到消息映射
backend/common/i18n/i18n.go:// 获取消息模板
backend/common/i18n/i18n.go:	// 检查语言是否存在
backend/common/i18n/i18n.go:		// 回退到默认语言
backend/common/i18n/i18n.go:		// 如果默认语言也不存在，直接返回错误码
backend/common/i18n/i18n.go:	// 检查消息是否存在
backend/common/i18n/i18n.go:		// 如果没有找到消息，尝试使用默认语言
backend/common/i18n/i18n.go:		// 最后回退到错误码本身
backend/common/i18n/i18n.go:// 翻译错误码为消息
backend/common/i18n/i18n.go:	// 如果有参数，格式化消息
backend/api/handler/option_test.go:	// 1. 保存配置
backend/api/handler/option_test.go:	// 2. 获取配置
backend/api/handler/option_test.go:	// 打印响应内容，便于调试
backend/api/handler/mcp_service.go:// @Summary 更新MCP服务
backend/api/handler/mcp_service.go:// @Description 更新现有的MCP服务，支持修改环境变量定义和包管理器信息
backend/api/handler/mcp_service.go:// @Param id path int true "服务ID"
backend/api/handler/mcp_service.go:// @Param service body object true "服务信息"
backend/api/handler/mcp_service.go:	// 保存原始值用于比较
backend/api/handler/mcp_service.go:	// 基本验证
backend/api/handler/mcp_service.go:	// 验证服务类型
backend/api/handler/mcp_service.go:	// 验证RequiredEnvVarsJSON (如果提供)
backend/api/handler/mcp_service.go:	// 如果是marketplace服务（stdio类型且PackageManager不为空），验证相关字段
backend/api/handler/mcp_service.go:		// 检查是否修改了关键包信息，可能需要重新安装
backend/api/handler/mcp_service.go:			// 这里可以添加处理逻辑或警告...
backend/api/handler/mcp_service.go:// @Summary 切换MCP服务启用状态
backend/api/handler/mcp_service.go:// @Description 切换MCP服务的启用/禁用状态
backend/api/handler/mcp_service.go:// @Param id path int true "服务ID"
backend/api/handler/mcp_service.go:	// 尝试获取服务，确认它存在
backend/api/handler/mcp_service.go:	// 切换启用状态
backend/api/handler/mcp_service.go:// @Summary 检查MCP服务的健康状态
backend/api/handler/mcp_service.go:// @Description 强制检查指定MCP服务的健康状态，并返回最新结果
backend/api/handler/mcp_service.go:// @Param id path int true "服务ID"
backend/api/handler/mcp_service.go:	// 获取服务信息
backend/api/handler/mcp_service.go:	// 获取服务管理器
backend/api/handler/mcp_service.go:	// 检查服务是否已经注册
backend/api/handler/mcp_service.go:		// 服务尚未注册，尝试注册
backend/api/handler/mcp_service.go:	// 强制检查健康状态
backend/api/handler/mcp_service.go:	// 更新数据库中的健康状态
backend/api/handler/mcp_service.go:	// 构建响应
backend/api/handler/mcp_service.go:// 辅助函数：验证服务类型
backend/api/handler/mcp_service.go:// 辅助函数：验证RequiredEnvVarsJSON格式
backend/api/handler/mcp_service.go:	// 验证每个环境变量是否有name字段
backend/api/handler/analytics.go:// @Summary 获取服务使用统计
backend/api/handler/analytics.go:// @Description 获取所有MCP服务的汇总使用统计数据，包括今日请求数和今日平均延迟等。
backend/api/handler/analytics.go:// @Success 200 {object} common.APIResponse{data=[]map[string]interface{}} "返回服务使用统计列表"
backend/api/handler/analytics.go:// @Failure 500 {object} common.APIResponse "服务器内部错误"
backend/api/handler/analytics.go:// @Summary 获取单个服务的详细性能指标
backend/api/handler/analytics.go:// @Description 获取指定MCP服务的详细性能指标，例如随时间变化的请求数、延迟分布等。
backend/api/handler/analytics.go:// @Param service_id query string true "服务ID"
backend/api/handler/analytics.go:// @Param time_range query string false "时间范围 (e.g., last_24h, last_7d, last_30d)"
backend/api/handler/analytics.go:// @Success 200 {object} common.APIResponse{data=map[string]interface{}} "返回服务的详细性能指标"
backend/api/handler/analytics.go:// @Failure 400 {object} common.APIResponse "无效的参数"
backend/api/handler/analytics.go:// @Failure 404 {object} common.APIResponse "服务未找到"
backend/api/handler/analytics.go:// @Failure 500 {object} common.APIResponse "服务器内部错误"
backend/api/handler/analytics.go:// @Summary 获取系统分析概览
backend/api/handler/analytics.go:// @Description 获取整个MCP系统的分析概览数据，包括服务统计、健康状态统计、今日请求数、响应时间等。
backend/api/handler/analytics.go:// @Success 200 {object} common.APIResponse{data=map[string]interface{}} "返回系统概览数据"
backend/api/handler/analytics.go:// @Failure 500 {object} common.APIResponse "服务器内部错误"
frontend/src/main.tsx:import './i18n' // 初始化 i18next
backend/api/handler/github.go:		return nil, errors.New("无效的参数")
backend/api/handler/github.go:		return nil, errors.New("无法连接至 GitHub 服务器，请稍后重试！")
backend/api/handler/github.go:		return nil, errors.New("无法连接至 GitHub 服务器，请稍后重试！")
backend/api/handler/github.go:		return nil, errors.New("返回值非法，用户字段为空，请稍后重试！")
backend/api/handler/github.go:			"message": "管理员未开启通过 GitHub 登录以及注册",
backend/api/handler/github.go:				"message": "管理员关闭了新用户注册",
backend/api/handler/github.go:			"message": "用户已被封禁",
backend/api/handler/github.go:			"message": "管理员未开启通过 GitHub 登录以及注册",
backend/api/handler/github.go:			"message": "该 GitHub 账户已被绑定",
backend/api/handler/github.go:			"message": "用户未登录",
backend/api/handler/github.go:			"message": "用户ID格式错误",
backend/api/handler/github.go:		"message": "GitHub账户绑定成功",
backend/api/middleware/lang.go:// LangMiddleware 注入 lang 到 context
backend/api/middleware/lang.go:			// 只取第一个语言
backend/api/middleware/lang.go:		// 设置到 gin.Context 中，这样 c.GetString("lang") 就能获取到
backend/api/middleware/turnstile-check.go:					"message": "Turnstile token 为空",
backend/api/middleware/turnstile-check.go:					"message": "Turnstile 校验失败，请刷新重试！",
backend/api/middleware/turnstile-check.go:					"message": "无法保存会话信息，请重试",
backend/api/handler/option.go:			"message": "无效的参数",
backend/api/handler/option.go:				"message": "无法启用 GitHub OAuth，请先填入 GitHub Client ID 以及 GitHub Client Secret！",
backend/api/handler/option.go:				"message": "无法启用 Google OAuth，请先填入 Google Client ID 以及 Google Client Secret！",
backend/api/handler/option.go:				"message": "无法启用微信登录，请先填入微信登录相关配置信息！",
backend/api/handler/option.go:				"message": "无法启用 Turnstile 校验，请先填入 Turnstile 校验相关配置信息！",
backend/common/config.go:// GetGitHubClientId 获取GitHub客户端ID
backend/common/config.go:// GetGitHubClientSecret 获取GitHub客户端密钥
backend/common/config.go:// GetGitHubOAuthEnabled 获取GitHub OAuth是否启用
backend/common/config.go:// GetGoogleClientId 获取Google客户端ID
backend/common/config.go:// GetGoogleClientSecret 获取Google客户端密钥
backend/common/config.go:// GetGoogleOAuthEnabled 获取Google OAuth是否启用
backend/common/config.go:// GetServerAddress 获取服务器地址
backend/common/config.go:// GetSystemName 获取系统名称
backend/common/config.go:// GetFooter 获取页脚信息
backend/common/config.go:// GetHomePageLink 获取首页链接
backend/common/config.go:// GetRegisterEnabled 获取注册是否启用
backend/common/config.go:// GetEmailVerificationEnabled 获取邮箱验证是否启用
backend/common/config.go:// GetWeChatAuthEnabled 获取微信认证是否启用
backend/common/config.go:// GetWeChatServerAddress 获取微信服务器地址
backend/common/config.go:// GetWeChatServerToken 获取微信服务器令牌
backend/common/config.go:// GetWeChatAccountQRCodeImageURL 获取微信账号二维码图片URL
backend/common/config.go:// GetTurnstileCheckEnabled 获取Turnstile检查是否启用
backend/common/config.go:// GetTurnstileSiteKey 获取Turnstile站点密钥
backend/common/config.go:// GetTurnstileSecretKey 获取Turnstile秘密密钥
backend/common/config.go:// GetSMTPServer 获取SMTP服务器
backend/common/config.go:// GetSMTPAccount 获取SMTP账号
backend/common/config.go:// GetSMTPToken 获取SMTP令牌
frontend/src/pages/DashboardPage.tsx:      {/* 欢迎卡片 */}
frontend/src/pages/DashboardPage.tsx:      {/* 统计卡片 */}
frontend/src/pages/DashboardPage.tsx:      {/* 系统状态和快速访问 */}
frontend/src/pages/DashboardPage.tsx:              {/* 系统运行时间 */}
frontend/src/pages/DashboardPage.tsx:              {/* 服务健康概览 */}
frontend/src/pages/DashboardPage.tsx:      {/* 最近活动日志 */}
backend/api/middleware/auth.go:				"message": "无权进行此操作，未登录或 token 无效",
backend/api/middleware/auth.go:				"message": "无权进行此操作，token 无效",
backend/api/middleware/auth.go:			"message": "用户已被封禁",
backend/api/middleware/auth.go:			"message": "无权进行此操作，权限不足",
backend/api/middleware/auth.go:				"message": "无权进行此操作，未登录或 token 无效",
backend/api/middleware/auth.go:				"message": "无权进行此操作，token 无效",
backend/api/middleware/auth.go:				"message": "用户已被封禁",
backend/api/handler/market.go:// @Summary 获取包详情
backend/api/handler/market.go:// @Description 获取指定包的详细信息
backend/api/handler/market.go:// @Param package_name query string true "包名"
backend/api/handler/market.go:// @Param package_manager query string true "包管理器，例如：npm"
backend/api/handler/market.go:				// 1. 从 DefaultEnvsJSON 加载默认环境变量
backend/api/handler/market.go:				// 2. 如果用户已登录，尝试加载并合并UserConfig（用户特定配置应覆盖默认配置）
backend/api/handler/market.go:								finalEnvValues[varName] = uc.Value // 用户特定配置覆盖默认配置
backend/api/handler/market.go:				// 3. 使用 finalEnvValues 更新 mcpConfig
backend/api/handler/market.go:					// 首先用 mcp_config 本身的 env (来自 readme/package.json) 作为基础
backend/api/handler/market.go:					// 然后用 finalEnvValues (来自DB的 DefaultEnvsJSON + UserConfig) 覆盖
backend/api/handler/market.go:// @Summary 发现环境变量
backend/api/handler/market.go:// @Description 尝试从包的信息中发现可能需要的环境变量
backend/api/handler/market.go:// @Param package_name query string true "包名"
backend/api/handler/market.go:// @Param package_manager query string true "包管理器，例如：npm"
backend/api/handler/market.go:	// 参数验证
backend/api/handler/market.go:	// 添加一个超时上下文
backend/api/handler/market.go:	// 根据包管理器类型发现环境变量
backend/api/handler/market.go:		// 获取包详情
backend/api/handler/market.go:		// 获取README内容
backend/api/handler/market.go:			// 获取README失败不是致命错误，只记录日志
backend/api/handler/market.go:		// 尝试从README中提取MCP配置
backend/api/handler/market.go:		// 首先从MCP配置中提取环境变量
backend/api/handler/market.go:		// 如果MCP配置中没有找到环境变量，则从README中猜测
backend/api/handler/market.go:		// 如果包中声明了RequiresEnv字段
backend/api/handler/market.go:	// 将猜测到的环境变量转换为EnvVarDefinition格式
backend/api/handler/market.go:// @Summary 安装或添加服务
backend/api/handler/market.go:// @Description 从市场安装服务或添加现有服务
backend/api/handler/market.go:// @Param body body map[string]interface{} true "请求体"
backend/api/handler/market.go:			c.JSON(http.StatusBadRequest, common.APIResponse{ // 使用 400 Bad Request
backend/api/handler/market.go:				Success: false, // 明确表示失败
backend/api/handler/market.go:			Enabled:               true, // 安装时直接启用服务
backend/api/handler/market.go:			InstallerUserID:       userID, // 记录安装者
backend/api/handler/market.go:// @Summary 获取安装状态
backend/api/handler/market.go:// @Description 获取指定服务的安装状态
backend/api/handler/market.go:// @Param service_id query int true "服务ID"
backend/api/handler/market.go:	// 获取安装管理器
backend/api/handler/market.go:	// 获取任务状态
backend/api/handler/market.go:		// 如果任务不存在，尝试从服务状态获取信息
backend/api/handler/market.go:		// 如果服务存在且已安装
backend/api/handler/market.go:	// 构建响应
backend/api/handler/market.go:// @Summary 卸载服务
backend/api/handler/market.go:// @Description 卸载指定的服务
backend/api/handler/market.go:// @Param body body struct{ ServiceID int64 `json:"service_id" binding:"required"` } true "请求体，包含 service_id"
backend/api/handler/market.go:	// 获取服务详情
backend/api/handler/market.go:	// 检查是否是处于安装中的服务
backend/api/handler/market.go:		// 进一步检查安装任务状态
backend/api/handler/market.go:			// 没有安装任务但也没有安装版本，可能是之前失败的安装遗留
backend/api/handler/market.go:	// 对于非安装中的服务，进行ServiceManager注销
backend/api/handler/market.go:		// 创建一个专门的超时上下文，给予足够的时间进行清理
backend/api/handler/market.go:			// 如果是超时错误，我们跳过物理卸载，直接进行软删除
backend/api/handler/market.go:	// 对于安装中的服务，跳过物理卸载，直接进行软删除
backend/api/handler/market.go:		// 卸载服务 - 根据 PackageManager 调用相应的卸载逻辑
backend/api/handler/market.go:		// 注意: 只有 stdio 类型且有 PackageManager 的服务才涉及物理卸载
backend/api/handler/market.go:		// SSE/HTTP 类型服务通常没有物理包卸载步骤，主要是DB记录的清理
backend/api/handler/market.go:	// 标记服务为软删除 (or hard delete if preferred)
backend/api/handler/market.go:	// 返回成功
backend/api/handler/market.go:// 辅助函数
backend/api/handler/market.go:// getInstalledPackages 获取已安装的包列表
backend/api/handler/market.go:	// 获取所有服务
backend/api/handler/market.go:	// 创建已安装包的映射
backend/api/handler/market.go:// getUserIDFromContext 从上下文中获取用户ID
backend/api/handler/market.go:// containsSource 检查数据源列表是否包含指定数据源
backend/api/handler/market.go:// contains 检查字符串切片是否包含指定字符串
backend/api/handler/market.go:// @Summary 搜索 MCP 市场服务
backend/api/handler/market.go:// @Description 支持从 npm、PyPI、推荐列表聚合搜索
backend/api/handler/market.go:// @Param query query string false "搜索关键词"
backend/api/handler/market.go:// @Param sources query string false "数据源, 逗号分隔 (npm,pypi,recommended)"
backend/api/handler/market.go:// @Param page query int false "页码"
backend/api/handler/market.go:// @Param size query int false "每页数量"
backend/api/handler/market.go:	// 目前仅实现 npm，后续可扩展 pypi/recommended
backend/api/handler/market.go:			// 查询已安装包的 numeric IDs
backend/api/handler/market.go:	// TODO: 支持 pypi、recommended
backend/api/handler/market.go:// @Summary 列出已安装的 MCP 服务
backend/api/handler/market.go:// @Description 查询数据库中已安装的 MCP 服务
backend/api/handler/market.go:	// 获取所有已安装服务（不论启用状态）
backend/api/handler/market.go:	// 获取缓存管理器
backend/api/handler/market.go:		// 1. 从 DefaultEnvsJSON 加载默认环境变量
backend/api/handler/market.go:		// 2. 如果用户已登录，获取并合并 UserConfig
backend/api/handler/market.go:						finalEnvVars[varName] = uc.Value // 用户特定配置覆盖默认配置
backend/api/handler/market.go:		// 组装结果
backend/api/handler/market.go:		svcMap["env_vars"] = finalEnvVars // 使用合并后的环境变量
backend/api/handler/market.go:		// 添加用户今日请求统计
backend/api/handler/market.go:			// 获取用户今日请求数
backend/api/handler/market.go:					// 缓存键不存在，说明今天还没有请求
backend/api/handler/market.go:			svcMap["remaining_requests"] = -1 // -1 表示无限制
backend/api/handler/market.go:		// 尝试从缓存获取健康状态
backend/api/handler/market.go:			// 使用缓存中的健康状态
backend/api/handler/market.go:			// 构造 health_details JSON
backend/api/handler/market.go:			// 缓存未命中，返回 "unknown" 状态
backend/api/handler/market.go:// @Summary 单独保存服务环境变量
backend/api/handler/market.go:// @Description 更新指定服务的单个环境变量。管理员修改会更新服务默认配置，普通用户修改会保存为个人配置
backend/api/handler/market.go:// @Param body body map[string]interface{} true "请求体"
backend/api/handler/market.go:	// 检查用户权限
backend/api/handler/market.go:		// 管理员：更新服务的默认环境变量配置
backend/api/handler/market.go:		// 解析现有的默认环境变量
backend/api/handler/market.go:		// 更新指定的环境变量
backend/api/handler/market.go:		// 重新序列化并保存
backend/api/handler/market.go:		// 普通用户：保存为个人配置
backend/api/handler/market.go:		// 查找或创建变量定义
backend/api/handler/market.go:				// 如果ConfigService不存在，创建一个
backend/api/handler/market.go:		// 保存用户配置
backend/api/handler/market.go:// @Summary 创建自定义服务
backend/api/handler/market.go:// @Description 创建一个自定义的MCP服务（支持stdio、sse、streamableHttp类型）
backend/api/handler/market.go:// @Param body body CustomServiceRequest true "自定义服务请求"
backend/api/handler/market.go:	// 清理和验证服务名称
backend/api/handler/market.go:	// 检查服务名称唯一性
backend/api/handler/market.go:	// 验证服务类型
backend/api/handler/market.go:	case "streamableHttp": // 前端发送的是 streamableHttp
backend/api/handler/market.go:		common.RespErrorStr(c, http.StatusBadRequest, "无效的服务类型")
backend/api/handler/market.go:	// 生成服务描述
backend/api/handler/market.go:	// 创建新服务
backend/api/handler/market.go:		Name:                  sanitizedName,    // 使用清理后的名称作为系统标识符
backend/api/handler/market.go:		DisplayName:           requestBody.Name, // 保留原始名称作为显示名称
backend/api/handler/market.go:		Description:           description,      // 使用新的动态描述
backend/api/handler/market.go:		Enabled:               true, // 自定义服务默认启用
backend/api/handler/market.go:	// 处理不同类型的配置
backend/api/handler/market.go:		// 处理参数
backend/api/handler/market.go:					common.RespError(c, http.StatusBadRequest, "参数格式错误", err)
backend/api/handler/market.go:		// 处理环境变量
backend/api/handler/market.go:					common.RespError(c, http.StatusBadRequest, "环境变量格式错误", err)
backend/api/handler/market.go:		// 对于sse和streamableHttp类型，将URL存储在Command字段
backend/api/handler/market.go:		// 处理Headers
backend/api/handler/market.go:					common.RespError(c, http.StatusBadRequest, "请求头格式错误", err)
backend/api/handler/market.go:	// 保存服务到数据库
backend/api/handler/market.go:	// 自动注册服务到 ServiceManager 以启用健康检查
backend/api/handler/market.go:		// 记录错误但不让API调用失败，因为服务已经成功创建
backend/api/handler/market.go:		// 在响应中包含警告信息
backend/api/handler/market.go:			"message":        "自定义服务创建成功，但服务注册出现警告",
backend/api/handler/market.go:			"warning":        fmt.Sprintf("服务健康检查可能无法正常工作: %v", err),
backend/api/handler/market.go:	// 注册后立即主动健康检查并刷新数据库状态
backend/api/handler/market.go:		"message":        "自定义服务创建成功",
frontend/src/App.tsx:  // const navigate = useNavigate() // 暂时未使用
frontend/src/App.tsx:            {/* 用户管理 - 仅管理员可见 */}
frontend/src/App.tsx:    // 订阅toast事件
frontend/src/App.tsx:    // 清理订阅
frontend/src/App.tsx:// 权限验证组件
frontend/src/pages/MarketPage.tsx:    // 查看服务详情
frontend/src/pages/MarketPage.tsx:    // 返回市场页面
frontend/src/pages/MarketPage.tsx:    // 根据是否选择了服务显示不同的组件
frontend/src/hooks/useServerAddress.ts:        // 首先尝试从 sessionStorage 获取
frontend/src/hooks/useServerAddress.ts:        // 如果 sessionStorage 没有，从 /status 接口获取
frontend/src/hooks/useServerAddress.ts:                // 保存到 sessionStorage
frontend/src/hooks/useServerAddress.ts:            // 如果 /status 失败，回退到原来的 /option/ 接口
frontend/src/hooks/useServerAddress.ts:                        // 保存到 sessionStorage
frontend/src/pages/AnalyticsPage.tsx:    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc'); // 默认倒序
frontend/src/pages/AnalyticsPage.tsx:    // 排序和过滤函数
frontend/src/pages/AnalyticsPage.tsx:        .filter(stat => stat.enabled) // 只显示启用的服务
frontend/src/pages/AnalyticsPage.tsx:    // 切换排序方向
frontend/src/pages/PreferencesPage.tsx:      setServerAddress(clean); // 立即同步到全局
frontend/src/pages/PreferencesPage.tsx:      sessionStorage.setItem('server_address', clean); // 同步更新缓存
frontend/src/pages/PreferencesPage.tsx:      {/* 通用设置 */}
frontend/src/pages/PreferencesPage.tsx:      {/* 配置登录注册 */}
frontend/src/pages/PreferencesPage.tsx:          {/* GitHub OAuth 开关 */}
frontend/src/pages/PreferencesPage.tsx:          {/* Google OAuth 开关 */}
frontend/src/pages/PreferencesPage.tsx:      {/* GitHub OAuth 配置 */}
frontend/src/pages/PreferencesPage.tsx:      {/* Google OAuth 配置 */}
frontend/src/utils/clipboard.ts: * 剪贴板工具函数
frontend/src/utils/clipboard.ts: * 提供现代 navigator.clipboard API 和传统 execCommand 的降级方案
frontend/src/utils/clipboard.ts: * 复制文本到剪贴板
frontend/src/utils/clipboard.ts: * @param text 要复制的文本
frontend/src/utils/clipboard.ts: * @returns Promise<CopyResult> 复制结果
frontend/src/utils/clipboard.ts: * 传统的复制方法（降级方案）
frontend/src/utils/clipboard.ts: * @param text 要复制的文本
frontend/src/utils/clipboard.ts: * @returns Promise<CopyResult> 复制结果
frontend/src/utils/clipboard.ts:        // 尝试将 textarea 插入到当前对话框内部（如果存在），以避免焦点陷阱阻止 focus
frontend/src/utils/clipboard.ts:                // 使用现代方法尝试复制，如果失败则使用传统方法
frontend/src/utils/clipboard.ts:                        // 如果现代方法也失败，尝试传统方法
frontend/src/utils/clipboard.ts:                    // 直接使用传统方法
frontend/src/utils/clipboard.ts: * 检查剪贴板是否可用
frontend/src/utils/clipboard.ts: * @returns boolean 是否支持剪贴板操作
frontend/src/utils/clipboard.ts:    // 优先检查现代 clipboard API
frontend/src/utils/clipboard.ts:    // 检查是否支持 execCommand (虽然已过期，但仍可作为降级方案)
frontend/src/utils/clipboard.ts: * 获取剪贴板错误的用户友好提示
frontend/src/utils/clipboard.ts: * @param error 错误类型
frontend/src/utils/clipboard.ts: * @returns string 错误提示键
frontend/src/pages/Login.tsx:    // 登录成功后跳转首页
frontend/src/utils/api.ts:// API响应类型
frontend/src/utils/api.ts:// 创建一个简单的事件发布订阅系统
frontend/src/utils/api.ts:// 创建axios实例，统一管理API请求
frontend/src/utils/api.ts:    baseURL: '/api', // 使用相对路径，将由Vite代理转发到后端
frontend/src/utils/api.ts:// 请求拦截器
frontend/src/utils/api.ts:        // 从localStorage获取token
frontend/src/utils/api.ts:        // 添加 Accept-Language 请求头
frontend/src/utils/api.ts:// 响应拦截器
frontend/src/utils/api.ts:            // 处理特定状态码
frontend/src/utils/api.ts:                    // 清除本地存储的认证信息
frontend/src/utils/api.ts:                    // 重定向到登录页
frontend/src/utils/api.ts:                        title: "无权限",
frontend/src/utils/api.ts:                        description: "您没有权限执行此操作"
frontend/src/utils/api.ts:                        title: "请求失败",
frontend/src/utils/api.ts:                        description: "请求的资源不存在"
frontend/src/utils/api.ts:                        title: "服务器错误",
frontend/src/utils/api.ts:                        description: "服务器错误，请稍后重试"
frontend/src/utils/api.ts:                        : "未知错误";
frontend/src/utils/api.ts:                        title: "请求失败",
frontend/src/utils/api.ts:                title: "网络错误",
frontend/src/utils/api.ts:                description: "请检查网络连接"
frontend/src/pages/ServicesPage.tsx:    // 检查用户是否是管理员(role >= 10)
frontend/src/pages/ServicesPage.tsx:            return; // 防止重复点击
frontend/src/pages/ServicesPage.tsx:            return; // 防止重复点击
frontend/src/pages/ServicesPage.tsx:        const maxAttempts = 30; // 最多轮询30次（约5分钟）
frontend/src/pages/ServicesPage.tsx:                        fetchInstalledServices(); // 刷新列表
frontend/src/pages/ServicesPage.tsx:                        // 继续轮询
frontend/src/pages/ServicesPage.tsx:                            setTimeout(poll, 10000); // 10秒后再次检查
frontend/src/pages/ServicesPage.tsx:                // 默认情况下继续轮询
frontend/src/pages/ServicesPage.tsx:                    setTimeout(poll, 10000); // 出错时也继续尝试
frontend/src/pages/ServicesPage.tsx:        // 开始轮询
frontend/src/pages/ServicesPage.tsx:                    // stdio 服务通过 install_or_add_service API，需要等待安装完成
frontend/src/pages/ServicesPage.tsx:                    // 轮询安装状态
frontend/src/pages/ServicesPage.tsx:                    // 对于 stdio 服务，立即关闭模态框，因为轮询会处理后续状态
frontend/src/pages/ServicesPage.tsx:                    // sse 和 streamableHttp 服务直接创建完成
frontend/src/pages/ServicesPage.tsx:                    // 延迟刷新列表，等待服务注册完成
frontend/src/pages/ServicesPage.tsx:                        // 确保列表刷新完成后再关闭模态框
frontend/src/pages/ServicesPage.tsx:                throw new Error(res.message || '创建失败');
frontend/src/pages/ServicesPage.tsx:    // 渲染列表视图
frontend/src/pages/ServicesPage.tsx:    // 渲染网格视图
frontend/src/pages/ServicesPage.tsx:                    {/* 视图切换按钮 */}
frontend/src/pages/ProfilePage.tsx:// import { useAuth } from '@/contexts/AuthContext'; // 暂时未使用
frontend/src/pages/ProfilePage.tsx:    // const { currentUser } = useAuth(); // 暂时未使用
frontend/src/pages/ProfilePage.tsx:    // const [editMode, setEditMode] = useState(true); // 不再需要编辑模式
frontend/src/pages/ProfilePage.tsx:    // 表单数据
frontend/src/pages/ProfilePage.tsx:    // 获取用户详细信息
frontend/src/pages/ProfilePage.tsx:    // 判断登录方式
frontend/src/pages/ProfilePage.tsx:    // 格式化显示的 API Key
frontend/src/pages/ProfilePage.tsx:    // 修改密码
frontend/src/pages/ProfilePage.tsx:                // 处理后端返回的错误信息
frontend/src/pages/ProfilePage.tsx:    // 刷新 API Key
frontend/src/pages/ProfilePage.tsx:    // 保存个人信息
frontend/src/pages/ProfilePage.tsx:                {/* 个人信息卡片 - OAuth 用户隐藏 */}
frontend/src/pages/ProfilePage.tsx:                {/* API Key 管理卡片 */}
frontend/src/pages/ProfilePage.tsx:            {/* 密码修改卡片（仅限账号密码登录用户） */}
frontend/src/pages/UsersPage.tsx:    // 获取用户列表
frontend/src/pages/UsersPage.tsx:                    title: '获取用户列表失败',
frontend/src/pages/UsersPage.tsx:                    description: response.message || '未知错误',
frontend/src/pages/UsersPage.tsx:                title: '获取用户列表失败',
frontend/src/pages/UsersPage.tsx:                description: error.message || '网络错误',
frontend/src/pages/UsersPage.tsx:    // 搜索处理
frontend/src/pages/UsersPage.tsx:    // 删除用户
frontend/src/pages/UsersPage.tsx:    // 设为管理员
frontend/src/pages/UsersPage.tsx:    // 设为普通用户
frontend/src/pages/UsersPage.tsx:    // 切换用户状态
frontend/src/pages/UsersPage.tsx:    // 获取角色显示文本
frontend/src/pages/UsersPage.tsx:    // 获取绑定状态
frontend/src/pages/UsersPage.tsx:            {/* 搜索框 */}
frontend/src/pages/UsersPage.tsx:            {/* 用户列表表格 */}
frontend/src/pages/UsersPage.tsx:                                            {/* 角色切换按钮 - 根据当前角色显示不同操作 */}
frontend/src/pages/UsersPage.tsx:            {/* 分页控件 */}
frontend/src/pages/UsersPage.tsx:            {/* 删除确认对话框 */}
frontend/src/pages/UsersPage.tsx:            {/* 用户新增/编辑对话框 */}
frontend/src/store/marketStore.ts:import api, { APIResponse, toastEmitter } from '@/utils/api'; // 引入 APIResponse 类型 和 toastEmitter
frontend/src/store/marketStore.ts:// 服务类型定义
frontend/src/store/marketStore.ts:    // 添加缺少的字段
frontend/src/store/marketStore.ts:    // 添加 RPD 限制和用户请求统计相关字段
frontend/src/store/marketStore.ts:// 详细服务类型定义
frontend/src/store/marketStore.ts:// 环境变量类型
frontend/src/store/marketStore.ts:// 安装状态类型
frontend/src/store/marketStore.ts:// 安装任务类型
frontend/src/store/marketStore.ts:// 卸载任务状态
frontend/src/store/marketStore.ts:// 新：市场来源类型
frontend/src/store/marketStore.ts:// 定义 Store 状态类型
frontend/src/store/marketStore.ts:    // 搜索相关
frontend/src/store/marketStore.ts:    activeMarketTab: MarketSource; // 新增：当前激活的市场选项卡
frontend/src/store/marketStore.ts:    // 已安装服务
frontend/src/store/marketStore.ts:    // 服务详情
frontend/src/store/marketStore.ts:    // 安装任务
frontend/src/store/marketStore.ts:    // 卸载任务状态
frontend/src/store/marketStore.ts:    // 操作方法
frontend/src/store/marketStore.ts:    setActiveMarketTab: (tab: MarketSource) => void; // 新增：设置激活的市场选项卡
frontend/src/store/marketStore.ts:    searchServices: (sourceArg?: 'installed') => Promise<void>; // 修改 searchServices 签名
frontend/src/store/marketStore.ts:// 创建 Store
frontend/src/store/marketStore.ts:    // 初始状态
frontend/src/store/marketStore.ts:    activeMarketTab: 'npm', // 新增：初始化 activeMarketTab
frontend/src/store/marketStore.ts:    // 操作方法
frontend/src/store/marketStore.ts:    setActiveMarketTab: (tab) => set({ activeMarketTab: tab }), // 新增：实现 setActiveMarketTab
frontend/src/store/marketStore.ts:        // 如果是请求已安装的服务
frontend/src/store/marketStore.ts:        // 如果搜索词为空 (且不是请求已安装服务)，则清空结果并停止
frontend/src/store/marketStore.ts:            // sources 由 activeMarketTab 决定
frontend/src/store/marketStore.ts:                        // 创建服务ID
frontend/src/store/marketStore.ts:            // 可以设置一个错误状态，但这里暂时不处理
frontend/src/store/marketStore.ts:                // 直接用后端返回的数组，保留所有字段
frontend/src/store/marketStore.ts:                    id: info.id || info.Name || info.name, // 兼容各种 id 字段
frontend/src/store/marketStore.ts:        // 这里仅设置选择的服务ID，具体的加载逻辑在 fetchServiceDetails 中
frontend/src/store/marketStore.ts:                // 将环境变量转换为前端格式 (unused but kept for consistency)
frontend/src/store/marketStore.ts:        // 直接从 searchResults 或 installedServices 查找 service 信息
frontend/src/store/marketStore.ts:            // RESTful: 如果需要补充 env vars，直接返回 response（完整 APIResponse）
frontend/src/store/marketStore.ts:                // 如果没有 task_id 或 mcp_service_id，且不是 required_env_vars，说明后端有问题
frontend/src/store/marketStore.ts:                    // 继续轮询，不弹 toast
frontend/src/store/marketStore.ts:                    // 其他未知状态，继续轮询
frontend/src/store/marketStore.ts:                // 只有在 response.success 为 false 或 data 缺失时才弹 toast
frontend/src/store/marketStore.ts:                    // 修复：使用service.id来删除installTask，而不是serviceIdString
frontend/src/store/marketStore.ts:                    // 也尝试删除serviceIdString的任务（以防万一）
frontend/src/store/marketStore.ts:                // 直接使用返回值更新对应服务的健康状态，而不是重新拉取整个列表
frontend/src/components/market/ServiceCard.tsx:                {/* GitHub Stars Display (仅主页为 GitHub 且 stars>0 时显示) */}
frontend/src/components/market/ServiceCard.tsx:                {/* npm Score Display (有值就显示) */}
frontend/src/components/market/ServiceDetails.tsx:    // 获取当前服务的安装任务（如果有）
frontend/src/components/market/ServiceDetails.tsx:    // 关闭安装对话框
frontend/src/components/market/ServiceDetails.tsx:            // 如果安装成功，刷新当前页面状态而不是返回上一级
frontend/src/components/market/ServiceDetails.tsx:                // 刷新当前服务详情以更新安装状态
frontend/src/components/market/ServiceDetails.tsx:    // 卸载服务
frontend/src/components/market/ServiceDetails.tsx:        // 显示确认对话框
frontend/src/components/market/ServiceDetails.tsx:                // 刷新当前服务详情以更新状态
frontend/src/components/market/ServiceDetails.tsx:                // 移除 searchServices() 调用，依赖 uninstallService 中的乐观更新
frontend/src/components/market/ServiceDetails.tsx:                await fetchServiceDetails(selectedService.id, selectedService.name, selectedService.source); // 重新获取当前服务详情
frontend/src/components/market/ServiceDetails.tsx:    // 加载状态
frontend/src/components/market/ServiceDetails.tsx:    // 服务不存在
frontend/src/components/market/ServiceDetails.tsx:            {/* 服务头部信息 */}
frontend/src/components/market/ServiceDetails.tsx:            {/* README 内容 */}
frontend/src/components/market/ServiceDetails.tsx:            {/* 安装进度对话框 */}
frontend/src/components/market/ServiceDetails.tsx:            {/* 环境变量输入模态框 */}
frontend/src/components/market/ServiceConfigModal.tsx:    id: string | number; // 兼容 ServiceType 的 string 类型 id
frontend/src/components/market/ServiceConfigModal.tsx:    rpd_limit?: number; // 改为可选
frontend/src/components/market/ServiceConfigModal.tsx:    // 获取用户token
frontend/src/components/market/ServiceConfigModal.tsx:                // 首先检查currentUser中是否已有token
frontend/src/components/market/ServiceConfigModal.tsx:                // 如果没有，从API获取
frontend/src/components/market/ServiceConfigModal.tsx:                        // 更新AuthContext中的用户信息
frontend/src/components/market/ServiceConfigModal.tsx:    // 检查用户是否是管理员(role >= 10)
frontend/src/components/market/ServiceConfigModal.tsx:    // 生成 endpoint
frontend/src/components/market/ServiceConfigModal.tsx:    // 生成 SSE JSON 配置
frontend/src/components/market/ServiceConfigModal.tsx:        // 如果有用户token，添加Authorization header
frontend/src/components/market/ServiceConfigModal.tsx:    // 生成 HTTP JSON 配置
frontend/src/components/market/ServiceConfigModal.tsx:            // 显示手动复制区域
frontend/src/components/market/ServiceConfigModal.tsx:            // 显示手动复制区域
frontend/src/components/market/ServiceConfigModal.tsx:            // 更新本地service对象
frontend/src/components/market/ServiceConfigModal.tsx:            // 重新计算剩余请求数
frontend/src/components/market/ServiceConfigModal.tsx:                service.remaining_requests = -1; // 无限制
frontend/src/components/market/ServiceConfigModal.tsx:                {/* 环境变量配置部分 - 只有管理员可以看到 */}
frontend/src/components/market/ServiceConfigModal.tsx:                {/* 端点地址部分 - 所有用户都可以看到 */}
frontend/src/components/market/ServiceConfigModal.tsx:                    {/* 安全上下文警告 */}
frontend/src/components/market/ServiceConfigModal.tsx:                {/* 每日请求限制 (RPD) 配置 */}
frontend/src/__tests__/setup.ts:// 每个测试后清理
frontend/src/__tests__/setup.ts:// Mock全局对象
frontend/src/components/market/EnvVarInputModal.tsx:        // 检查所有必填项
frontend/src/components/market/BatchImportModal.tsx:                alert('连接错误，请重试');
frontend/src/components/market/BatchImportModal.tsx:            alert('启动导入失败：' + (error instanceof Error ? error.message : String(error)));
frontend/src/components/market/ServiceMarketplace.tsx:    // 使用 Zustand store
frontend/src/components/market/ServiceMarketplace.tsx:        // 暂时注释掉 tab 相关状态，以后添加 PyPI 时恢复
frontend/src/components/market/ServiceMarketplace.tsx:    // 新增：环境变量 Modal 相关 state
frontend/src/components/market/ServiceMarketplace.tsx:    // 新增：安装进度对话框相关 state
frontend/src/components/market/ServiceMarketplace.tsx:    // 处理搜索框按下回车
frontend/src/components/market/ServiceMarketplace.tsx:    // 简化的安装服务处理函数，保持原有流程
frontend/src/components/market/ServiceMarketplace.tsx:        // 找到对应的服务
frontend/src/components/market/ServiceMarketplace.tsx:                return; // 等待用户输入
frontend/src/components/market/ServiceMarketplace.tsx:            // 安装成功或已提交任务，显示进度对话框
frontend/src/components/market/ServiceMarketplace.tsx:    // Modal 提交回调
frontend/src/components/market/ServiceMarketplace.tsx:    // Modal 取消回调
frontend/src/components/market/ServiceMarketplace.tsx:    // 关闭安装对话框
frontend/src/components/market/ServiceMarketplace.tsx:            // 如果安装成功，刷新已安装服务列表
frontend/src/components/market/ServiceMarketplace.tsx:    // 将当前显示的服务列表计算出来
frontend/src/components/market/ServiceMarketplace.tsx:    // 获取当前安装任务
frontend/src/components/market/ServiceMarketplace.tsx:            {/* 搜索和过滤部分 */}
frontend/src/components/market/ServiceMarketplace.tsx:            {/* 服务列表 - 暂时移除 Tabs，以后添加 PyPI 市场时再恢复 */}
frontend/src/components/market/ServiceMarketplace.tsx:            {/* TODO: 将来需要添加 PyPI 市场时，恢复以下 Tabs 结构 */}
frontend/src/components/market/ServiceMarketplace.tsx:            {/* 环境变量输入模态框 */}
frontend/src/components/market/ServiceMarketplace.tsx:            {/* 安装进度对话框 */}
frontend/src/components/ui/login-dialog.tsx:    // 登录成功后关闭弹窗并跳转首页
frontend/src/__tests__/utils/test-utils.tsx:// 自定义渲染函数
frontend/src/__tests__/utils/test-utils.tsx:// Mock数据生成器
frontend/src/__tests__/utils/test-utils.tsx:// 测试用的环境变量Mock
frontend/src/__tests__/utils/test-utils.tsx:// 重新导出testing-library的所有工具
frontend/src/components/ui/theme-toggle.tsx:        // 移除之前的类
frontend/src/components/ui/theme-toggle.tsx:        // 根据主题设置添加类
frontend/src/components/ui/theme-toggle.tsx:    // 监听系统主题变化
frontend/src/components/ui/LoginFormCommon.tsx:    isDialogMode?: boolean; // 可选，便于样式微调
frontend/src/components/ui/LoginFormCommon.tsx:                title: "GitHub OAuth 未配置",
frontend/src/components/ui/LoginFormCommon.tsx:                description: "请联系管理员配置 GitHub OAuth"
frontend/src/components/ui/LoginFormCommon.tsx:                title: "Google OAuth 未配置",
frontend/src/components/ui/LoginFormCommon.tsx:                description: "请联系管理员配置 Google OAuth"
frontend/src/components/ui/LoginFormCommon.tsx:                title: "输入错误",
frontend/src/components/ui/LoginFormCommon.tsx:                description: "用户名和密码不能为空。"
frontend/src/components/ui/LoginFormCommon.tsx:                    title: "登录成功",
frontend/src/components/ui/LoginFormCommon.tsx:                    description: "欢迎回来！"
frontend/src/components/ui/LoginFormCommon.tsx:                const message = apiResponse?.message || "登录失败，请检查用户名和密码。";
frontend/src/components/ui/LoginFormCommon.tsx:                    title: "登录失败",
frontend/src/components/ui/LoginFormCommon.tsx:            let message = "登录请求失败，请稍后重试。";
frontend/src/components/ui/LoginFormCommon.tsx:                title: "登录错误",
frontend/src/components/ui/LoginFormCommon.tsx:                    title={!oauthConfig.github_oauth || !oauthConfig.github_client_id ? "GitHub OAuth 未配置" : "使用 GitHub 登录"}
frontend/src/components/ui/LoginFormCommon.tsx:                    title={!oauthConfig.google_oauth || !oauthConfig.google_client_id ? "Google OAuth 未配置" : "使用 Google 登录"}
frontend/src/components/ui/LoginFormCommon.tsx:                {loading ? "登录中..." : "Continue"} <span className="ml-2">➔</span>
